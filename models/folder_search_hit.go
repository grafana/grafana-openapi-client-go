// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FolderSearchHit folder search hit
//
// swagger:model FolderSearchHit
type FolderSearchHit struct {

	// id
	ID int64 `json:"id,omitempty"`

	// managed by
	ManagedBy ManagerKind `json:"managedBy,omitempty"`

	// parent Uid
	ParentUID string `json:"parentUid,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`
}

// Validate validates this folder search hit
func (m *FolderSearchHit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FolderSearchHit) validateManagedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagedBy) { // not required
		return nil
	}

	if err := m.ManagedBy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("managedBy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("managedBy")
		}
		return err
	}

	return nil
}

// ContextValidate validate this folder search hit based on the context it is used
func (m *FolderSearchHit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManagedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FolderSearchHit) contextValidateManagedBy(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ManagedBy) { // not required
		return nil
	}

	if err := m.ManagedBy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("managedBy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("managedBy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FolderSearchHit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FolderSearchHit) UnmarshalBinary(b []byte) error {
	var res FolderSearchHit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
