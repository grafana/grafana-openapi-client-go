// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JiraConfig jira config
//
// swagger:model JiraConfig
type JiraConfig struct {

	// api url
	APIURL *URL `json:"api_url,omitempty"`

	// custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// http config
	HTTPConfig *HTTPClientConfig `json:"http_config,omitempty"`

	// issue type
	IssueType string `json:"issue_type,omitempty"`

	// labels
	Labels []string `json:"labels"`

	// priority
	Priority string `json:"priority,omitempty"`

	// project
	Project string `json:"project,omitempty"`

	// reopen duration
	ReopenDuration Duration `json:"reopen_duration,omitempty"`

	// reopen transition
	ReopenTransition string `json:"reopen_transition,omitempty"`

	// resolve transition
	ResolveTransition string `json:"resolve_transition,omitempty"`

	// send resolved
	SendResolved bool `json:"send_resolved,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// wont fix resolution
	WontFixResolution string `json:"wont_fix_resolution,omitempty"`
}

// Validate validates this jira config
func (m *JiraConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReopenDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JiraConfig) validateAPIURL(formats strfmt.Registry) error {
	if swag.IsZero(m.APIURL) { // not required
		return nil
	}

	if m.APIURL != nil {
		if err := m.APIURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api_url")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("api_url")
			}
			return err
		}
	}

	return nil
}

func (m *JiraConfig) validateHTTPConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPConfig) { // not required
		return nil
	}

	if m.HTTPConfig != nil {
		if err := m.HTTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_config")
			}
			return err
		}
	}

	return nil
}

func (m *JiraConfig) validateReopenDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.ReopenDuration) { // not required
		return nil
	}

	if err := m.ReopenDuration.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reopen_duration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("reopen_duration")
		}
		return err
	}

	return nil
}

// ContextValidate validate this jira config based on the context it is used
func (m *JiraConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHTTPConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReopenDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JiraConfig) contextValidateAPIURL(ctx context.Context, formats strfmt.Registry) error {

	if m.APIURL != nil {

		if swag.IsZero(m.APIURL) { // not required
			return nil
		}

		if err := m.APIURL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api_url")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("api_url")
			}
			return err
		}
	}

	return nil
}

func (m *JiraConfig) contextValidateHTTPConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTPConfig != nil {

		if swag.IsZero(m.HTTPConfig) { // not required
			return nil
		}

		if err := m.HTTPConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_config")
			}
			return err
		}
	}

	return nil
}

func (m *JiraConfig) contextValidateReopenDuration(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ReopenDuration) { // not required
		return nil
	}

	if err := m.ReopenDuration.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reopen_duration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("reopen_duration")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JiraConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JiraConfig) UnmarshalBinary(b []byte) error {
	var res JiraConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
