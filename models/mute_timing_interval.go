// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MuteTimingInterval mute timing interval
//
// swagger:model MuteTimingInterval
type MuteTimingInterval struct {

	// an inclusive range of days of month, e.g. "1" or "5:15".
	DaysOfMonth []string `json:"days_of_month"`

	// a location time zone for the time interval in the IANA Time Zone Database format, e.g. "America/New_York".
	Location string `json:"location,omitempty"`

	// an inclusive range of months, e.g. "january" or "february:april".
	Months []string `json:"months"`

	// an inclusive range of times
	Times []*MuteTimingTimeRange `json:"times"`

	// an inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	Weekdays []string `json:"weekdays"`

	// an inclusive range of years, e.g. "2019" or "2020:2022".
	Years []string `json:"years"`
}

// Validate validates this mute timing interval
func (m *MuteTimingInterval) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MuteTimingInterval) validateTimes(formats strfmt.Registry) error {
	if swag.IsZero(m.Times) { // not required
		return nil
	}

	for i := 0; i < len(m.Times); i++ {
		if swag.IsZero(m.Times[i]) { // not required
			continue
		}

		if m.Times[i] != nil {
			if err := m.Times[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("times" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("times" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mute timing interval based on the context it is used
func (m *MuteTimingInterval) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MuteTimingInterval) contextValidateTimes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Times); i++ {

		if m.Times[i] != nil {

			if swag.IsZero(m.Times[i]) { // not required
				return nil
			}

			if err := m.Times[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("times" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("times" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MuteTimingInterval) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MuteTimingInterval) UnmarshalBinary(b []byte) error {
	var res MuteTimingInterval
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
