// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SettingsDTO settings DTO
//
// swagger:model SettingsDTO
type SettingsDTO struct {

	// branding
	Branding *BrandingOptionsDTO `json:"branding,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// org Id
	OrgID int64 `json:"orgId,omitempty"`

	// user Id
	UserID int64 `json:"userId,omitempty"`
}

// Validate validates this settings DTO
func (m *SettingsDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsDTO) validateBranding(formats strfmt.Registry) error {
	if swag.IsZero(m.Branding) { // not required
		return nil
	}

	if m.Branding != nil {
		if err := m.Branding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branding")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this settings DTO based on the context it is used
func (m *SettingsDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBranding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsDTO) contextValidateBranding(ctx context.Context, formats strfmt.Registry) error {

	if m.Branding != nil {

		if swag.IsZero(m.Branding) { // not required
			return nil
		}

		if err := m.Branding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branding")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingsDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsDTO) UnmarshalBinary(b []byte) error {
	var res SettingsDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
