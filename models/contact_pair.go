// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContactPair contact pair
//
// swagger:model ContactPair
type ContactPair struct {

	// contact point
	ContactPoint *ContactPointUpgrade `json:"contactPoint,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// legacy channel
	LegacyChannel *LegacyChannel `json:"legacyChannel,omitempty"`
}

// Validate validates this contact pair
func (m *ContactPair) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegacyChannel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactPair) validateContactPoint(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactPoint) { // not required
		return nil
	}

	if m.ContactPoint != nil {
		if err := m.ContactPoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactPoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactPoint")
			}
			return err
		}
	}

	return nil
}

func (m *ContactPair) validateLegacyChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.LegacyChannel) { // not required
		return nil
	}

	if m.LegacyChannel != nil {
		if err := m.LegacyChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("legacyChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("legacyChannel")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this contact pair based on the context it is used
func (m *ContactPair) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactPoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLegacyChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactPair) contextValidateContactPoint(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactPoint != nil {

		if swag.IsZero(m.ContactPoint) { // not required
			return nil
		}

		if err := m.ContactPoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactPoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactPoint")
			}
			return err
		}
	}

	return nil
}

func (m *ContactPair) contextValidateLegacyChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.LegacyChannel != nil {

		if swag.IsZero(m.LegacyChannel) { // not required
			return nil
		}

		if err := m.LegacyChannel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("legacyChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("legacyChannel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactPair) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactPair) UnmarshalBinary(b []byte) error {
	var res ContactPair
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
