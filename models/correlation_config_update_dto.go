// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CorrelationConfigUpdateDTO correlation config update DTO
//
// swagger:model CorrelationConfigUpdateDTO
type CorrelationConfigUpdateDTO struct {

	// Field used to attach the correlation link
	// Example: message
	Field string `json:"field,omitempty"`

	// Target data query
	// Example: {"prop1":"value1","prop2":"value"}
	Target interface{} `json:"target,omitempty"`

	// Source data transformations
	// Example: [{"type":"logfmt"},{"expression":"(Superman|Batman)","type":"regex","variable":"name"}]
	Transformations []*Transformation `json:"transformations"`

	// type
	Type CorrelationConfigType `json:"type,omitempty"`
}

// Validate validates this correlation config update DTO
func (m *CorrelationConfigUpdateDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransformations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CorrelationConfigUpdateDTO) validateTransformations(formats strfmt.Registry) error {
	if swag.IsZero(m.Transformations) { // not required
		return nil
	}

	for i := 0; i < len(m.Transformations); i++ {
		if swag.IsZero(m.Transformations[i]) { // not required
			continue
		}

		if m.Transformations[i] != nil {
			if err := m.Transformations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transformations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transformations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CorrelationConfigUpdateDTO) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this correlation config update DTO based on the context it is used
func (m *CorrelationConfigUpdateDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTransformations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CorrelationConfigUpdateDTO) contextValidateTransformations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transformations); i++ {

		if m.Transformations[i] != nil {

			if swag.IsZero(m.Transformations[i]) { // not required
				return nil
			}

			if err := m.Transformations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transformations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transformations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CorrelationConfigUpdateDTO) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CorrelationConfigUpdateDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CorrelationConfigUpdateDTO) UnmarshalBinary(b []byte) error {
	var res CorrelationConfigUpdateDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
