// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AlertPair alert pair
//
// swagger:model AlertPair
type AlertPair struct {

	// alert rule
	AlertRule *AlertRuleUpgrade `json:"alertRule,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// legacy alert
	LegacyAlert *LegacyAlert `json:"legacyAlert,omitempty"`
}

// Validate validates this alert pair
func (m *AlertPair) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegacyAlert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertPair) validateAlertRule(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertRule) { // not required
		return nil
	}

	if m.AlertRule != nil {
		if err := m.AlertRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertRule")
			}
			return err
		}
	}

	return nil
}

func (m *AlertPair) validateLegacyAlert(formats strfmt.Registry) error {
	if swag.IsZero(m.LegacyAlert) { // not required
		return nil
	}

	if m.LegacyAlert != nil {
		if err := m.LegacyAlert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("legacyAlert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("legacyAlert")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this alert pair based on the context it is used
func (m *AlertPair) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLegacyAlert(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertPair) contextValidateAlertRule(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertRule != nil {

		if swag.IsZero(m.AlertRule) { // not required
			return nil
		}

		if err := m.AlertRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertRule")
			}
			return err
		}
	}

	return nil
}

func (m *AlertPair) contextValidateLegacyAlert(ctx context.Context, formats strfmt.Registry) error {

	if m.LegacyAlert != nil {

		if swag.IsZero(m.LegacyAlert) { // not required
			return nil
		}

		if err := m.LegacyAlert.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("legacyAlert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("legacyAlert")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertPair) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertPair) UnmarshalBinary(b []byte) error {
	var res AlertPair
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
