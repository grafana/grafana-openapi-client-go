// Code generated by go-swagger; DO NOT EDIT.

package sync_team_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchTeamGroupsParams creates a new SearchTeamGroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchTeamGroupsParams() *SearchTeamGroupsParams {
	return &SearchTeamGroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchTeamGroupsParamsWithTimeout creates a new SearchTeamGroupsParams object
// with the ability to set a timeout on a request.
func NewSearchTeamGroupsParamsWithTimeout(timeout time.Duration) *SearchTeamGroupsParams {
	return &SearchTeamGroupsParams{
		timeout: timeout,
	}
}

// NewSearchTeamGroupsParamsWithContext creates a new SearchTeamGroupsParams object
// with the ability to set a context for a request.
func NewSearchTeamGroupsParamsWithContext(ctx context.Context) *SearchTeamGroupsParams {
	return &SearchTeamGroupsParams{
		Context: ctx,
	}
}

// NewSearchTeamGroupsParamsWithHTTPClient creates a new SearchTeamGroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchTeamGroupsParamsWithHTTPClient(client *http.Client) *SearchTeamGroupsParams {
	return &SearchTeamGroupsParams{
		HTTPClient: client,
	}
}

/*
SearchTeamGroupsParams contains all the parameters to send to the API endpoint

	for the search team groups operation.

	Typically these are written to a http.Request.
*/
type SearchTeamGroupsParams struct {

	/* Name.

	   Filter by exact name match
	*/
	Name *string

	// Page.
	//
	// Format: int64
	// Default: 1
	Page *int64

	/* Perpage.

	   Number of items per page

	   Format: int64
	   Default: 1000
	*/
	Perpage *int64

	/* Query.

	   If set it will return results where the query value is contained in the name field. Query values with spaces need to be URL encoded.
	*/
	Query *string

	// TeamID.
	//
	// Format: int64
	TeamID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search team groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchTeamGroupsParams) WithDefaults() *SearchTeamGroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search team groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchTeamGroupsParams) SetDefaults() {
	var (
		pageDefault = int64(1)

		perpageDefault = int64(1000)
	)

	val := SearchTeamGroupsParams{
		Page:    &pageDefault,
		Perpage: &perpageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search team groups params
func (o *SearchTeamGroupsParams) WithTimeout(timeout time.Duration) *SearchTeamGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search team groups params
func (o *SearchTeamGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search team groups params
func (o *SearchTeamGroupsParams) WithContext(ctx context.Context) *SearchTeamGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search team groups params
func (o *SearchTeamGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search team groups params
func (o *SearchTeamGroupsParams) WithHTTPClient(client *http.Client) *SearchTeamGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search team groups params
func (o *SearchTeamGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the search team groups params
func (o *SearchTeamGroupsParams) WithName(name *string) *SearchTeamGroupsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the search team groups params
func (o *SearchTeamGroupsParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the search team groups params
func (o *SearchTeamGroupsParams) WithPage(page *int64) *SearchTeamGroupsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the search team groups params
func (o *SearchTeamGroupsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerpage adds the perpage to the search team groups params
func (o *SearchTeamGroupsParams) WithPerpage(perpage *int64) *SearchTeamGroupsParams {
	o.SetPerpage(perpage)
	return o
}

// SetPerpage adds the perpage to the search team groups params
func (o *SearchTeamGroupsParams) SetPerpage(perpage *int64) {
	o.Perpage = perpage
}

// WithQuery adds the query to the search team groups params
func (o *SearchTeamGroupsParams) WithQuery(query *string) *SearchTeamGroupsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the search team groups params
func (o *SearchTeamGroupsParams) SetQuery(query *string) {
	o.Query = query
}

// WithTeamID adds the teamID to the search team groups params
func (o *SearchTeamGroupsParams) WithTeamID(teamID int64) *SearchTeamGroupsParams {
	o.SetTeamID(teamID)
	return o
}

// SetTeamID adds the teamId to the search team groups params
func (o *SearchTeamGroupsParams) SetTeamID(teamID int64) {
	o.TeamID = teamID
}

// WriteToRequest writes these params to a swagger request
func (o *SearchTeamGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Perpage != nil {

		// query param perpage
		var qrPerpage int64

		if o.Perpage != nil {
			qrPerpage = *o.Perpage
		}
		qPerpage := swag.FormatInt64(qrPerpage)
		if qPerpage != "" {

			if err := r.SetQueryParam("perpage", qPerpage); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	// path param teamId
	if err := r.SetPathParam("teamId", swag.FormatInt64(o.TeamID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
