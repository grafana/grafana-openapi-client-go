// Code generated by go-swagger; DO NOT EDIT.

package provisioning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new provisioning API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for provisioning API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAlertRule(params *DeleteAlertRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertRuleNoContent, error)

	DeleteContactpoints(params *DeleteContactpointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteContactpointsNoContent, error)

	DeleteMuteTiming(params *DeleteMuteTimingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMuteTimingNoContent, error)

	DeleteTemplate(params *DeleteTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTemplateNoContent, error)

	GetAlertRule(params *GetAlertRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRuleOK, error)

	GetAlertRuleExport(params *GetAlertRuleExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRuleExportOK, error)

	GetAlertRuleGroup(params *GetAlertRuleGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRuleGroupOK, error)

	GetAlertRuleGroupExport(params *GetAlertRuleGroupExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRuleGroupExportOK, error)

	GetAlertRules(params *GetAlertRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRulesOK, error)

	GetAlertRulesExport(params *GetAlertRulesExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRulesExportOK, error)

	GetContactpoints(params *GetContactpointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetContactpointsOK, error)

	GetContactpointsExport(params *GetContactpointsExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetContactpointsExportOK, error)

	GetMuteTiming(params *GetMuteTimingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMuteTimingOK, error)

	GetMuteTimings(params *GetMuteTimingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMuteTimingsOK, error)

	GetPolicyTree(params *GetPolicyTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyTreeOK, error)

	GetPolicyTreeExport(params *GetPolicyTreeExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyTreeExportOK, error)

	GetTemplate(params *GetTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateOK, error)

	GetTemplates(params *GetTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplatesOK, error)

	PostAlertRule(params *PostAlertRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertRuleCreated, error)

	PostContactpoints(params *PostContactpointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostContactpointsAccepted, error)

	PostMuteTiming(params *PostMuteTimingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostMuteTimingCreated, error)

	PutAlertRule(params *PutAlertRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAlertRuleOK, error)

	PutAlertRuleGroup(params *PutAlertRuleGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAlertRuleGroupOK, error)

	PutContactpoint(params *PutContactpointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactpointAccepted, error)

	PutMuteTiming(params *PutMuteTimingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutMuteTimingOK, error)

	PutPolicyTree(params *PutPolicyTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutPolicyTreeAccepted, error)

	PutTemplate(params *PutTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutTemplateAccepted, error)

	ResetPolicyTree(params *ResetPolicyTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetPolicyTreeAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAlertRule deletes a specific alert rule by UID
*/
func (a *Client) DeleteAlertRule(params *DeleteAlertRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAlertRule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/provisioning/alert-rules/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAlertRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAlertRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteContactpoints deletes a contact point
*/
func (a *Client) DeleteContactpoints(params *DeleteContactpointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteContactpointsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContactpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteContactpoints",
		Method:             "DELETE",
		PathPattern:        "/api/v1/provisioning/contact-points/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteContactpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteContactpointsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteContactpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMuteTiming deletes a mute timing
*/
func (a *Client) DeleteMuteTiming(params *DeleteMuteTimingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMuteTimingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMuteTimingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteMuteTiming",
		Method:             "DELETE",
		PathPattern:        "/api/v1/provisioning/mute-timings/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMuteTimingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMuteTimingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteMuteTiming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTemplate deletes a template
*/
func (a *Client) DeleteTemplate(params *DeleteTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTemplate",
		Method:             "DELETE",
		PathPattern:        "/api/v1/provisioning/templates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertRule gets a specific alert rule by UID
*/
func (a *Client) GetAlertRule(params *GetAlertRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertRule",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/alert-rules/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertRuleExport exports an alert rule in provisioning file format
*/
func (a *Client) GetAlertRuleExport(params *GetAlertRuleExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRuleExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertRuleExport",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/alert-rules/{UID}/export",
		ProducesMediaTypes: []string{"application/json", "application/yaml", "text/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertRuleExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertRuleExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertRuleExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertRuleGroup gets a rule group
*/
func (a *Client) GetAlertRuleGroup(params *GetAlertRuleGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRuleGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertRuleGroup",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertRuleGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertRuleGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertRuleGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertRuleGroupExport exports an alert rule group in provisioning file format
*/
func (a *Client) GetAlertRuleGroupExport(params *GetAlertRuleGroupExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRuleGroupExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleGroupExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertRuleGroupExport",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}/export",
		ProducesMediaTypes: []string{"application/json", "application/yaml", "text/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertRuleGroupExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertRuleGroupExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertRuleGroupExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertRules gets all the alert rules
*/
func (a *Client) GetAlertRules(params *GetAlertRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertRules",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/alert-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertRulesExport exports all alert rules in provisioning file format
*/
func (a *Client) GetAlertRulesExport(params *GetAlertRulesExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertRulesExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRulesExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertRulesExport",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/alert-rules/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertRulesExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertRulesExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertRulesExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContactpoints gets all the contact points
*/
func (a *Client) GetContactpoints(params *GetContactpointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetContactpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetContactpoints",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/contact-points",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetContactpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetContactpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContactpointsExport exports all contact points in provisioning file format
*/
func (a *Client) GetContactpointsExport(params *GetContactpointsExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetContactpointsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactpointsExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetContactpointsExport",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/contact-points/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetContactpointsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactpointsExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetContactpointsExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMuteTiming gets a mute timing
*/
func (a *Client) GetMuteTiming(params *GetMuteTimingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMuteTimingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMuteTimingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMuteTiming",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/mute-timings/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMuteTimingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMuteTimingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMuteTiming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMuteTimings gets all the mute timings
*/
func (a *Client) GetMuteTimings(params *GetMuteTimingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMuteTimingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMuteTimingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMuteTimings",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/mute-timings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMuteTimingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMuteTimingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMuteTimings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyTree gets the notification policy tree
*/
func (a *Client) GetPolicyTree(params *GetPolicyTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyTreeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPolicyTree",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPolicyTreeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyTreeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPolicyTree: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyTreeExport exports the notification policy tree in provisioning file format
*/
func (a *Client) GetPolicyTreeExport(params *GetPolicyTreeExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyTreeExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyTreeExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPolicyTreeExport",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/policies/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPolicyTreeExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyTreeExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPolicyTreeExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTemplate gets a notification template
*/
func (a *Client) GetTemplate(params *GetTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTemplate",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/templates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTemplates gets all notification templates
*/
func (a *Client) GetTemplates(params *GetTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTemplates",
		Method:             "GET",
		PathPattern:        "/api/v1/provisioning/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAlertRule creates a new alert rule
*/
func (a *Client) PostAlertRule(params *PostAlertRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertRuleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAlertRule",
		Method:             "POST",
		PathPattern:        "/api/v1/provisioning/alert-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostAlertRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAlertRuleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostContactpoints creates a contact point
*/
func (a *Client) PostContactpoints(params *PostContactpointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostContactpointsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContactpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostContactpoints",
		Method:             "POST",
		PathPattern:        "/api/v1/provisioning/contact-points",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostContactpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostContactpointsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostContactpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostMuteTiming creates a new mute timing
*/
func (a *Client) PostMuteTiming(params *PostMuteTimingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostMuteTimingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMuteTimingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostMuteTiming",
		Method:             "POST",
		PathPattern:        "/api/v1/provisioning/mute-timings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostMuteTimingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMuteTimingCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostMuteTiming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAlertRule updates an existing alert rule
*/
func (a *Client) PutAlertRule(params *PutAlertRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAlertRule",
		Method:             "PUT",
		PathPattern:        "/api/v1/provisioning/alert-rules/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAlertRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAlertRuleGroup updates the interval of a rule group
*/
func (a *Client) PutAlertRuleGroup(params *PutAlertRuleGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAlertRuleGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAlertRuleGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAlertRuleGroup",
		Method:             "PUT",
		PathPattern:        "/api/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutAlertRuleGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAlertRuleGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAlertRuleGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutContactpoint updates an existing contact point
*/
func (a *Client) PutContactpoint(params *PutContactpointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutContactpointAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContactpointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutContactpoint",
		Method:             "PUT",
		PathPattern:        "/api/v1/provisioning/contact-points/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutContactpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutContactpointAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutContactpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutMuteTiming replaces an existing mute timing
*/
func (a *Client) PutMuteTiming(params *PutMuteTimingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutMuteTimingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMuteTimingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutMuteTiming",
		Method:             "PUT",
		PathPattern:        "/api/v1/provisioning/mute-timings/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutMuteTimingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutMuteTimingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutMuteTiming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutPolicyTree sets the notification policy tree
*/
func (a *Client) PutPolicyTree(params *PutPolicyTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutPolicyTreeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPolicyTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutPolicyTree",
		Method:             "PUT",
		PathPattern:        "/api/v1/provisioning/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutPolicyTreeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPolicyTreeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutPolicyTree: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutTemplate updates an existing notification template
*/
func (a *Client) PutTemplate(params *PutTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutTemplateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutTemplate",
		Method:             "PUT",
		PathPattern:        "/api/v1/provisioning/templates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutTemplateAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResetPolicyTree clears the notification policy tree
*/
func (a *Client) ResetPolicyTree(params *ResetPolicyTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetPolicyTreeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetPolicyTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResetPolicyTree",
		Method:             "DELETE",
		PathPattern:        "/api/v1/provisioning/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResetPolicyTreeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetPolicyTreeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResetPolicyTree: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
