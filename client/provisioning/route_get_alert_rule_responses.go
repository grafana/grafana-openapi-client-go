// Code generated by go-swagger; DO NOT EDIT.

package provisioning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-openapi-client-go/models"
)

// RouteGetAlertRuleReader is a Reader for the RouteGetAlertRule structure.
type RouteGetAlertRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouteGetAlertRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRouteGetAlertRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRouteGetAlertRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/provisioning/alert-rules/{UID}] RouteGetAlertRule", response, response.Code())
	}
}

// NewRouteGetAlertRuleOK creates a RouteGetAlertRuleOK with default headers values
func NewRouteGetAlertRuleOK() *RouteGetAlertRuleOK {
	return &RouteGetAlertRuleOK{}
}

/*
RouteGetAlertRuleOK describes a response with status code 200, with default header values.

ProvisionedAlertRule
*/
type RouteGetAlertRuleOK struct {
	Payload *models.ProvisionedAlertRule
}

// IsSuccess returns true when this route get alert rule Ok response has a 2xx status code
func (o *RouteGetAlertRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this route get alert rule Ok response has a 3xx status code
func (o *RouteGetAlertRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this route get alert rule Ok response has a 4xx status code
func (o *RouteGetAlertRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this route get alert rule Ok response has a 5xx status code
func (o *RouteGetAlertRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this route get alert rule Ok response a status code equal to that given
func (o *RouteGetAlertRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the route get alert rule Ok response
func (o *RouteGetAlertRuleOK) Code() int {
	return 200
}

func (o *RouteGetAlertRuleOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/provisioning/alert-rules/{UID}][%d] routeGetAlertRuleOk  %+v", 200, o.Payload)
}

func (o *RouteGetAlertRuleOK) String() string {
	return fmt.Sprintf("[GET /api/v1/provisioning/alert-rules/{UID}][%d] routeGetAlertRuleOk  %+v", 200, o.Payload)
}

func (o *RouteGetAlertRuleOK) GetPayload() *models.ProvisionedAlertRule {
	return o.Payload
}

func (o *RouteGetAlertRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProvisionedAlertRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRouteGetAlertRuleNotFound creates a RouteGetAlertRuleNotFound with default headers values
func NewRouteGetAlertRuleNotFound() *RouteGetAlertRuleNotFound {
	return &RouteGetAlertRuleNotFound{}
}

/*
RouteGetAlertRuleNotFound describes a response with status code 404, with default header values.

	Not found.
*/
type RouteGetAlertRuleNotFound struct {
}

// IsSuccess returns true when this route get alert rule not found response has a 2xx status code
func (o *RouteGetAlertRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this route get alert rule not found response has a 3xx status code
func (o *RouteGetAlertRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this route get alert rule not found response has a 4xx status code
func (o *RouteGetAlertRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this route get alert rule not found response has a 5xx status code
func (o *RouteGetAlertRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this route get alert rule not found response a status code equal to that given
func (o *RouteGetAlertRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the route get alert rule not found response
func (o *RouteGetAlertRuleNotFound) Code() int {
	return 404
}

func (o *RouteGetAlertRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/provisioning/alert-rules/{UID}][%d] routeGetAlertRuleNotFound ", 404)
}

func (o *RouteGetAlertRuleNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/provisioning/alert-rules/{UID}][%d] routeGetAlertRuleNotFound ", 404)
}

func (o *RouteGetAlertRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
