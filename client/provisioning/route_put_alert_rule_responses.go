// Code generated by go-swagger; DO NOT EDIT.

package provisioning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-openapi-client-go/models"
)

// RoutePutAlertRuleReader is a Reader for the RoutePutAlertRule structure.
type RoutePutAlertRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RoutePutAlertRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRoutePutAlertRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRoutePutAlertRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v1/provisioning/alert-rules/{UID}] RoutePutAlertRule", response, response.Code())
	}
}

// NewRoutePutAlertRuleOK creates a RoutePutAlertRuleOK with default headers values
func NewRoutePutAlertRuleOK() *RoutePutAlertRuleOK {
	return &RoutePutAlertRuleOK{}
}

/*
RoutePutAlertRuleOK describes a response with status code 200, with default header values.

ProvisionedAlertRule
*/
type RoutePutAlertRuleOK struct {
	Payload *models.ProvisionedAlertRule
}

// IsSuccess returns true when this route put alert rule Ok response has a 2xx status code
func (o *RoutePutAlertRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this route put alert rule Ok response has a 3xx status code
func (o *RoutePutAlertRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this route put alert rule Ok response has a 4xx status code
func (o *RoutePutAlertRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this route put alert rule Ok response has a 5xx status code
func (o *RoutePutAlertRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this route put alert rule Ok response a status code equal to that given
func (o *RoutePutAlertRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the route put alert rule Ok response
func (o *RoutePutAlertRuleOK) Code() int {
	return 200
}

func (o *RoutePutAlertRuleOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/provisioning/alert-rules/{UID}][%d] routePutAlertRuleOk  %+v", 200, o.Payload)
}

func (o *RoutePutAlertRuleOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/provisioning/alert-rules/{UID}][%d] routePutAlertRuleOk  %+v", 200, o.Payload)
}

func (o *RoutePutAlertRuleOK) GetPayload() *models.ProvisionedAlertRule {
	return o.Payload
}

func (o *RoutePutAlertRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProvisionedAlertRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoutePutAlertRuleBadRequest creates a RoutePutAlertRuleBadRequest with default headers values
func NewRoutePutAlertRuleBadRequest() *RoutePutAlertRuleBadRequest {
	return &RoutePutAlertRuleBadRequest{}
}

/*
RoutePutAlertRuleBadRequest describes a response with status code 400, with default header values.

ValidationError
*/
type RoutePutAlertRuleBadRequest struct {
	Payload *models.ValidationError
}

// IsSuccess returns true when this route put alert rule bad request response has a 2xx status code
func (o *RoutePutAlertRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this route put alert rule bad request response has a 3xx status code
func (o *RoutePutAlertRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this route put alert rule bad request response has a 4xx status code
func (o *RoutePutAlertRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this route put alert rule bad request response has a 5xx status code
func (o *RoutePutAlertRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this route put alert rule bad request response a status code equal to that given
func (o *RoutePutAlertRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the route put alert rule bad request response
func (o *RoutePutAlertRuleBadRequest) Code() int {
	return 400
}

func (o *RoutePutAlertRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/provisioning/alert-rules/{UID}][%d] routePutAlertRuleBadRequest  %+v", 400, o.Payload)
}

func (o *RoutePutAlertRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v1/provisioning/alert-rules/{UID}][%d] routePutAlertRuleBadRequest  %+v", 400, o.Payload)
}

func (o *RoutePutAlertRuleBadRequest) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *RoutePutAlertRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
