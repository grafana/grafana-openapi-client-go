// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-openapi-client-go/models"
)

// GetReportsByDashboardUIDReader is a Reader for the GetReportsByDashboardUID structure.
type GetReportsByDashboardUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportsByDashboardUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportsByDashboardUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetReportsByDashboardUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReportsByDashboardUIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReportsByDashboardUIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /reports/dashboards/{uid}] getReportsByDashboardUID", response, response.Code())
	}
}

// NewGetReportsByDashboardUIDOK creates a GetReportsByDashboardUIDOK with default headers values
func NewGetReportsByDashboardUIDOK() *GetReportsByDashboardUIDOK {
	return &GetReportsByDashboardUIDOK{}
}

/*
GetReportsByDashboardUIDOK describes a response with status code 200, with default header values.

(empty)
*/
type GetReportsByDashboardUIDOK struct {
	Payload []*models.Report
}

// IsSuccess returns true when this get reports by dashboard Uid Ok response has a 2xx status code
func (o *GetReportsByDashboardUIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get reports by dashboard Uid Ok response has a 3xx status code
func (o *GetReportsByDashboardUIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reports by dashboard Uid Ok response has a 4xx status code
func (o *GetReportsByDashboardUIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get reports by dashboard Uid Ok response has a 5xx status code
func (o *GetReportsByDashboardUIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get reports by dashboard Uid Ok response a status code equal to that given
func (o *GetReportsByDashboardUIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get reports by dashboard Uid Ok response
func (o *GetReportsByDashboardUIDOK) Code() int {
	return 200
}

func (o *GetReportsByDashboardUIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reports/dashboards/{uid}][%d] getReportsByDashboardUidOk %s", 200, payload)
}

func (o *GetReportsByDashboardUIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reports/dashboards/{uid}][%d] getReportsByDashboardUidOk %s", 200, payload)
}

func (o *GetReportsByDashboardUIDOK) GetPayload() []*models.Report {
	return o.Payload
}

func (o *GetReportsByDashboardUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportsByDashboardUIDUnauthorized creates a GetReportsByDashboardUIDUnauthorized with default headers values
func NewGetReportsByDashboardUIDUnauthorized() *GetReportsByDashboardUIDUnauthorized {
	return &GetReportsByDashboardUIDUnauthorized{}
}

/*
GetReportsByDashboardUIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetReportsByDashboardUIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

// IsSuccess returns true when this get reports by dashboard Uid unauthorized response has a 2xx status code
func (o *GetReportsByDashboardUIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reports by dashboard Uid unauthorized response has a 3xx status code
func (o *GetReportsByDashboardUIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reports by dashboard Uid unauthorized response has a 4xx status code
func (o *GetReportsByDashboardUIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reports by dashboard Uid unauthorized response has a 5xx status code
func (o *GetReportsByDashboardUIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get reports by dashboard Uid unauthorized response a status code equal to that given
func (o *GetReportsByDashboardUIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get reports by dashboard Uid unauthorized response
func (o *GetReportsByDashboardUIDUnauthorized) Code() int {
	return 401
}

func (o *GetReportsByDashboardUIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reports/dashboards/{uid}][%d] getReportsByDashboardUidUnauthorized %s", 401, payload)
}

func (o *GetReportsByDashboardUIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reports/dashboards/{uid}][%d] getReportsByDashboardUidUnauthorized %s", 401, payload)
}

func (o *GetReportsByDashboardUIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetReportsByDashboardUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportsByDashboardUIDForbidden creates a GetReportsByDashboardUIDForbidden with default headers values
func NewGetReportsByDashboardUIDForbidden() *GetReportsByDashboardUIDForbidden {
	return &GetReportsByDashboardUIDForbidden{}
}

/*
GetReportsByDashboardUIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetReportsByDashboardUIDForbidden struct {
	Payload *models.ErrorResponseBody
}

// IsSuccess returns true when this get reports by dashboard Uid forbidden response has a 2xx status code
func (o *GetReportsByDashboardUIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reports by dashboard Uid forbidden response has a 3xx status code
func (o *GetReportsByDashboardUIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reports by dashboard Uid forbidden response has a 4xx status code
func (o *GetReportsByDashboardUIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get reports by dashboard Uid forbidden response has a 5xx status code
func (o *GetReportsByDashboardUIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get reports by dashboard Uid forbidden response a status code equal to that given
func (o *GetReportsByDashboardUIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get reports by dashboard Uid forbidden response
func (o *GetReportsByDashboardUIDForbidden) Code() int {
	return 403
}

func (o *GetReportsByDashboardUIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reports/dashboards/{uid}][%d] getReportsByDashboardUidForbidden %s", 403, payload)
}

func (o *GetReportsByDashboardUIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reports/dashboards/{uid}][%d] getReportsByDashboardUidForbidden %s", 403, payload)
}

func (o *GetReportsByDashboardUIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetReportsByDashboardUIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportsByDashboardUIDInternalServerError creates a GetReportsByDashboardUIDInternalServerError with default headers values
func NewGetReportsByDashboardUIDInternalServerError() *GetReportsByDashboardUIDInternalServerError {
	return &GetReportsByDashboardUIDInternalServerError{}
}

/*
GetReportsByDashboardUIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetReportsByDashboardUIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

// IsSuccess returns true when this get reports by dashboard Uid internal server error response has a 2xx status code
func (o *GetReportsByDashboardUIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get reports by dashboard Uid internal server error response has a 3xx status code
func (o *GetReportsByDashboardUIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get reports by dashboard Uid internal server error response has a 4xx status code
func (o *GetReportsByDashboardUIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get reports by dashboard Uid internal server error response has a 5xx status code
func (o *GetReportsByDashboardUIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get reports by dashboard Uid internal server error response a status code equal to that given
func (o *GetReportsByDashboardUIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get reports by dashboard Uid internal server error response
func (o *GetReportsByDashboardUIDInternalServerError) Code() int {
	return 500
}

func (o *GetReportsByDashboardUIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reports/dashboards/{uid}][%d] getReportsByDashboardUidInternalServerError %s", 500, payload)
}

func (o *GetReportsByDashboardUIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /reports/dashboards/{uid}][%d] getReportsByDashboardUidInternalServerError %s", 500, payload)
}

func (o *GetReportsByDashboardUIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetReportsByDashboardUIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
