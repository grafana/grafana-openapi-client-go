// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRenderReportCSVsParams creates a new RenderReportCSVsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRenderReportCSVsParams() *RenderReportCSVsParams {
	return &RenderReportCSVsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRenderReportCSVsParamsWithTimeout creates a new RenderReportCSVsParams object
// with the ability to set a timeout on a request.
func NewRenderReportCSVsParamsWithTimeout(timeout time.Duration) *RenderReportCSVsParams {
	return &RenderReportCSVsParams{
		timeout: timeout,
	}
}

// NewRenderReportCSVsParamsWithContext creates a new RenderReportCSVsParams object
// with the ability to set a context for a request.
func NewRenderReportCSVsParamsWithContext(ctx context.Context) *RenderReportCSVsParams {
	return &RenderReportCSVsParams{
		Context: ctx,
	}
}

// NewRenderReportCSVsParamsWithHTTPClient creates a new RenderReportCSVsParams object
// with the ability to set a custom HTTPClient for a request.
func NewRenderReportCSVsParamsWithHTTPClient(client *http.Client) *RenderReportCSVsParams {
	return &RenderReportCSVsParams{
		HTTPClient: client,
	}
}

/*
RenderReportCSVsParams contains all the parameters to send to the API endpoint

	for the render report c s vs operation.

	Typically these are written to a http.Request.
*/
type RenderReportCSVsParams struct {

	// Dashboards.
	Dashboards *string

	// Title.
	Title *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the render report c s vs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RenderReportCSVsParams) WithDefaults() *RenderReportCSVsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the render report c s vs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RenderReportCSVsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the render report c s vs params
func (o *RenderReportCSVsParams) WithTimeout(timeout time.Duration) *RenderReportCSVsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the render report c s vs params
func (o *RenderReportCSVsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the render report c s vs params
func (o *RenderReportCSVsParams) WithContext(ctx context.Context) *RenderReportCSVsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the render report c s vs params
func (o *RenderReportCSVsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the render report c s vs params
func (o *RenderReportCSVsParams) WithHTTPClient(client *http.Client) *RenderReportCSVsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the render report c s vs params
func (o *RenderReportCSVsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDashboards adds the dashboards to the render report c s vs params
func (o *RenderReportCSVsParams) WithDashboards(dashboards *string) *RenderReportCSVsParams {
	o.SetDashboards(dashboards)
	return o
}

// SetDashboards adds the dashboards to the render report c s vs params
func (o *RenderReportCSVsParams) SetDashboards(dashboards *string) {
	o.Dashboards = dashboards
}

// WithTitle adds the title to the render report c s vs params
func (o *RenderReportCSVsParams) WithTitle(title *string) *RenderReportCSVsParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the render report c s vs params
func (o *RenderReportCSVsParams) SetTitle(title *string) {
	o.Title = title
}

// WriteToRequest writes these params to a swagger request
func (o *RenderReportCSVsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dashboards != nil {

		// query param dashboards
		var qrDashboards string

		if o.Dashboards != nil {
			qrDashboards = *o.Dashboards
		}
		qDashboards := qrDashboards
		if qDashboards != "" {

			if err := r.SetQueryParam("dashboards", qDashboards); err != nil {
				return err
			}
		}
	}

	if o.Title != nil {

		// query param title
		var qrTitle string

		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {

			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
