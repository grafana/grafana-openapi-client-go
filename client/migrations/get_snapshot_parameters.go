// Code generated by go-swagger; DO NOT EDIT.

package migrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSnapshotParams creates a new GetSnapshotParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSnapshotParams() *GetSnapshotParams {
	return &GetSnapshotParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSnapshotParamsWithTimeout creates a new GetSnapshotParams object
// with the ability to set a timeout on a request.
func NewGetSnapshotParamsWithTimeout(timeout time.Duration) *GetSnapshotParams {
	return &GetSnapshotParams{
		timeout: timeout,
	}
}

// NewGetSnapshotParamsWithContext creates a new GetSnapshotParams object
// with the ability to set a context for a request.
func NewGetSnapshotParamsWithContext(ctx context.Context) *GetSnapshotParams {
	return &GetSnapshotParams{
		Context: ctx,
	}
}

// NewGetSnapshotParamsWithHTTPClient creates a new GetSnapshotParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSnapshotParamsWithHTTPClient(client *http.Client) *GetSnapshotParams {
	return &GetSnapshotParams{
		HTTPClient: client,
	}
}

/*
GetSnapshotParams contains all the parameters to send to the API endpoint

	for the get snapshot operation.

	Typically these are written to a http.Request.
*/
type GetSnapshotParams struct {

	/* ErrorsOnly.

	   ErrorsOnly is used to only return resources with error statuses
	*/
	ErrorsOnly *bool

	/* ResultLimit.

	   Max limit for snapshot results returned.

	   Format: int64
	   Default: 100
	*/
	ResultLimit *int64

	/* ResultPage.

	   ResultPage is used for pagination with ResultLimit

	   Format: int64
	   Default: 1
	*/
	ResultPage *int64

	/* ResultSortColumn.

	   ResultSortColumn can be used to override the default system sort. Valid values are "name", "resource_type", and "status".

	   Default: "default"
	*/
	ResultSortColumn *string

	/* ResultSortOrder.

	   ResultSortOrder is used with ResultSortColumn. Valid values are ASC and DESC.

	   Default: "ASC"
	*/
	ResultSortOrder *string

	/* SnapshotUID.

	   UID of a snapshot
	*/
	SnapshotUID string

	/* UID.

	   Session UID of a session
	*/
	UID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get snapshot params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSnapshotParams) WithDefaults() *GetSnapshotParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get snapshot params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSnapshotParams) SetDefaults() {
	var (
		errorsOnlyDefault = bool(false)

		resultLimitDefault = int64(100)

		resultPageDefault = int64(1)

		resultSortColumnDefault = string("default")

		resultSortOrderDefault = string("ASC")
	)

	val := GetSnapshotParams{
		ErrorsOnly:       &errorsOnlyDefault,
		ResultLimit:      &resultLimitDefault,
		ResultPage:       &resultPageDefault,
		ResultSortColumn: &resultSortColumnDefault,
		ResultSortOrder:  &resultSortOrderDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get snapshot params
func (o *GetSnapshotParams) WithTimeout(timeout time.Duration) *GetSnapshotParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get snapshot params
func (o *GetSnapshotParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get snapshot params
func (o *GetSnapshotParams) WithContext(ctx context.Context) *GetSnapshotParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get snapshot params
func (o *GetSnapshotParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get snapshot params
func (o *GetSnapshotParams) WithHTTPClient(client *http.Client) *GetSnapshotParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get snapshot params
func (o *GetSnapshotParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithErrorsOnly adds the errorsOnly to the get snapshot params
func (o *GetSnapshotParams) WithErrorsOnly(errorsOnly *bool) *GetSnapshotParams {
	o.SetErrorsOnly(errorsOnly)
	return o
}

// SetErrorsOnly adds the errorsOnly to the get snapshot params
func (o *GetSnapshotParams) SetErrorsOnly(errorsOnly *bool) {
	o.ErrorsOnly = errorsOnly
}

// WithResultLimit adds the resultLimit to the get snapshot params
func (o *GetSnapshotParams) WithResultLimit(resultLimit *int64) *GetSnapshotParams {
	o.SetResultLimit(resultLimit)
	return o
}

// SetResultLimit adds the resultLimit to the get snapshot params
func (o *GetSnapshotParams) SetResultLimit(resultLimit *int64) {
	o.ResultLimit = resultLimit
}

// WithResultPage adds the resultPage to the get snapshot params
func (o *GetSnapshotParams) WithResultPage(resultPage *int64) *GetSnapshotParams {
	o.SetResultPage(resultPage)
	return o
}

// SetResultPage adds the resultPage to the get snapshot params
func (o *GetSnapshotParams) SetResultPage(resultPage *int64) {
	o.ResultPage = resultPage
}

// WithResultSortColumn adds the resultSortColumn to the get snapshot params
func (o *GetSnapshotParams) WithResultSortColumn(resultSortColumn *string) *GetSnapshotParams {
	o.SetResultSortColumn(resultSortColumn)
	return o
}

// SetResultSortColumn adds the resultSortColumn to the get snapshot params
func (o *GetSnapshotParams) SetResultSortColumn(resultSortColumn *string) {
	o.ResultSortColumn = resultSortColumn
}

// WithResultSortOrder adds the resultSortOrder to the get snapshot params
func (o *GetSnapshotParams) WithResultSortOrder(resultSortOrder *string) *GetSnapshotParams {
	o.SetResultSortOrder(resultSortOrder)
	return o
}

// SetResultSortOrder adds the resultSortOrder to the get snapshot params
func (o *GetSnapshotParams) SetResultSortOrder(resultSortOrder *string) {
	o.ResultSortOrder = resultSortOrder
}

// WithSnapshotUID adds the snapshotUID to the get snapshot params
func (o *GetSnapshotParams) WithSnapshotUID(snapshotUID string) *GetSnapshotParams {
	o.SetSnapshotUID(snapshotUID)
	return o
}

// SetSnapshotUID adds the snapshotUid to the get snapshot params
func (o *GetSnapshotParams) SetSnapshotUID(snapshotUID string) {
	o.SnapshotUID = snapshotUID
}

// WithUID adds the uid to the get snapshot params
func (o *GetSnapshotParams) WithUID(uid string) *GetSnapshotParams {
	o.SetUID(uid)
	return o
}

// SetUID adds the uid to the get snapshot params
func (o *GetSnapshotParams) SetUID(uid string) {
	o.UID = uid
}

// WriteToRequest writes these params to a swagger request
func (o *GetSnapshotParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ErrorsOnly != nil {

		// query param errorsOnly
		var qrErrorsOnly bool

		if o.ErrorsOnly != nil {
			qrErrorsOnly = *o.ErrorsOnly
		}
		qErrorsOnly := swag.FormatBool(qrErrorsOnly)
		if qErrorsOnly != "" {

			if err := r.SetQueryParam("errorsOnly", qErrorsOnly); err != nil {
				return err
			}
		}
	}

	if o.ResultLimit != nil {

		// query param resultLimit
		var qrResultLimit int64

		if o.ResultLimit != nil {
			qrResultLimit = *o.ResultLimit
		}
		qResultLimit := swag.FormatInt64(qrResultLimit)
		if qResultLimit != "" {

			if err := r.SetQueryParam("resultLimit", qResultLimit); err != nil {
				return err
			}
		}
	}

	if o.ResultPage != nil {

		// query param resultPage
		var qrResultPage int64

		if o.ResultPage != nil {
			qrResultPage = *o.ResultPage
		}
		qResultPage := swag.FormatInt64(qrResultPage)
		if qResultPage != "" {

			if err := r.SetQueryParam("resultPage", qResultPage); err != nil {
				return err
			}
		}
	}

	if o.ResultSortColumn != nil {

		// query param resultSortColumn
		var qrResultSortColumn string

		if o.ResultSortColumn != nil {
			qrResultSortColumn = *o.ResultSortColumn
		}
		qResultSortColumn := qrResultSortColumn
		if qResultSortColumn != "" {

			if err := r.SetQueryParam("resultSortColumn", qResultSortColumn); err != nil {
				return err
			}
		}
	}

	if o.ResultSortOrder != nil {

		// query param resultSortOrder
		var qrResultSortOrder string

		if o.ResultSortOrder != nil {
			qrResultSortOrder = *o.ResultSortOrder
		}
		qResultSortOrder := qrResultSortOrder
		if qResultSortOrder != "" {

			if err := r.SetQueryParam("resultSortOrder", qResultSortOrder); err != nil {
				return err
			}
		}
	}

	// path param snapshotUid
	if err := r.SetPathParam("snapshotUid", o.SnapshotUID); err != nil {
		return err
	}

	// path param uid
	if err := r.SetPathParam("uid", o.UID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
