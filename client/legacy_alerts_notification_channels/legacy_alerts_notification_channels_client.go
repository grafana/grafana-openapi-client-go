// Code generated by go-swagger; DO NOT EDIT.

package legacy_alerts_notification_channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new legacy alerts notification channels API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for legacy alerts notification channels API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAlertNotificationChannel(params *CreateAlertNotificationChannelParams, opts ...ClientOption) (*CreateAlertNotificationChannelOK, error)

	DeleteAlertNotificationChannel(params *DeleteAlertNotificationChannelParams, opts ...ClientOption) (*DeleteAlertNotificationChannelOK, error)

	DeleteAlertNotificationChannelByUID(params *DeleteAlertNotificationChannelByUIDParams, opts ...ClientOption) (*DeleteAlertNotificationChannelByUIDOK, error)

	GetAlertNotificationChannelByID(params *GetAlertNotificationChannelByIDParams, opts ...ClientOption) (*GetAlertNotificationChannelByIDOK, error)

	GetAlertNotificationChannelByUID(params *GetAlertNotificationChannelByUIDParams, opts ...ClientOption) (*GetAlertNotificationChannelByUIDOK, error)

	GetAlertNotificationChannels(params *GetAlertNotificationChannelsParams, opts ...ClientOption) (*GetAlertNotificationChannelsOK, error)

	GetAlertNotificationLookup(params *GetAlertNotificationLookupParams, opts ...ClientOption) (*GetAlertNotificationLookupOK, error)

	NotificationChannelTest(params *NotificationChannelTestParams, opts ...ClientOption) (*NotificationChannelTestOK, error)

	UpdateAlertNotificationChannel(params *UpdateAlertNotificationChannelParams, opts ...ClientOption) (*UpdateAlertNotificationChannelOK, error)

	UpdateAlertNotificationChannelByUID(params *UpdateAlertNotificationChannelByUIDParams, opts ...ClientOption) (*UpdateAlertNotificationChannelByUIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAlertNotificationChannel creates notification channel

You can find the full list of [supported notifiers](https://grafana.com/docs/grafana/latest/alerting/old-alerting/notifications/#list-of-supported-notifiers) on the alert notifiers page.
*/
func (a *Client) CreateAlertNotificationChannel(params *CreateAlertNotificationChannelParams, opts ...ClientOption) (*CreateAlertNotificationChannelOK, error) {
	if params == nil {
		params = NewCreateAlertNotificationChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAlertNotificationChannel",
		Method:             "POST",
		PathPattern:        "/alert-notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAlertNotificationChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAlertNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAlertNotificationChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAlertNotificationChannel deletes alert notification by ID

Deletes an existing notification channel identified by ID.
*/
func (a *Client) DeleteAlertNotificationChannel(params *DeleteAlertNotificationChannelParams, opts ...ClientOption) (*DeleteAlertNotificationChannelOK, error) {
	if params == nil {
		params = NewDeleteAlertNotificationChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAlertNotificationChannel",
		Method:             "DELETE",
		PathPattern:        "/alert-notifications/{notification_channel_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAlertNotificationChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAlertNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAlertNotificationChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAlertNotificationChannelByUID deletes alert notification by UID

Deletes an existing notification channel identified by UID.
*/
func (a *Client) DeleteAlertNotificationChannelByUID(params *DeleteAlertNotificationChannelByUIDParams, opts ...ClientOption) (*DeleteAlertNotificationChannelByUIDOK, error) {
	if params == nil {
		params = NewDeleteAlertNotificationChannelByUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAlertNotificationChannelByUID",
		Method:             "DELETE",
		PathPattern:        "/alert-notifications/uid/{notification_channel_uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAlertNotificationChannelByUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAlertNotificationChannelByUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAlertNotificationChannelByUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertNotificationChannelByID gets notification channel by ID

Returns the notification channel given the notification channel ID.
*/
func (a *Client) GetAlertNotificationChannelByID(params *GetAlertNotificationChannelByIDParams, opts ...ClientOption) (*GetAlertNotificationChannelByIDOK, error) {
	if params == nil {
		params = NewGetAlertNotificationChannelByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertNotificationChannelByID",
		Method:             "GET",
		PathPattern:        "/alert-notifications/{notification_channel_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertNotificationChannelByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertNotificationChannelByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertNotificationChannelByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertNotificationChannelByUID gets notification channel by UID

Returns the notification channel given the notification channel UID.
*/
func (a *Client) GetAlertNotificationChannelByUID(params *GetAlertNotificationChannelByUIDParams, opts ...ClientOption) (*GetAlertNotificationChannelByUIDOK, error) {
	if params == nil {
		params = NewGetAlertNotificationChannelByUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertNotificationChannelByUID",
		Method:             "GET",
		PathPattern:        "/alert-notifications/uid/{notification_channel_uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertNotificationChannelByUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertNotificationChannelByUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertNotificationChannelByUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertNotificationChannels gets all notification channels

Returns all notification channels that the authenticated user has permission to view.
*/
func (a *Client) GetAlertNotificationChannels(params *GetAlertNotificationChannelsParams, opts ...ClientOption) (*GetAlertNotificationChannelsOK, error) {
	if params == nil {
		params = NewGetAlertNotificationChannelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertNotificationChannels",
		Method:             "GET",
		PathPattern:        "/alert-notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertNotificationChannelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertNotificationChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertNotificationChannels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertNotificationLookup gets all notification channels lookup

Returns all notification channels, but with less detailed information. Accessible by any authenticated user and is mainly used by providing alert notification channels in Grafana UI when configuring alert rule.
*/
func (a *Client) GetAlertNotificationLookup(params *GetAlertNotificationLookupParams, opts ...ClientOption) (*GetAlertNotificationLookupOK, error) {
	if params == nil {
		params = NewGetAlertNotificationLookupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertNotificationLookup",
		Method:             "GET",
		PathPattern:        "/alert-notifications/lookup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAlertNotificationLookupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertNotificationLookupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertNotificationLookup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NotificationChannelTest tests notification channel

Sends a test notification to the channel.
*/
func (a *Client) NotificationChannelTest(params *NotificationChannelTestParams, opts ...ClientOption) (*NotificationChannelTestOK, error) {
	if params == nil {
		params = NewNotificationChannelTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "notificationChannelTest",
		Method:             "POST",
		PathPattern:        "/alert-notifications/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NotificationChannelTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NotificationChannelTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for notificationChannelTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAlertNotificationChannel updates notification channel by ID

Updates an existing notification channel identified by ID.
*/
func (a *Client) UpdateAlertNotificationChannel(params *UpdateAlertNotificationChannelParams, opts ...ClientOption) (*UpdateAlertNotificationChannelOK, error) {
	if params == nil {
		params = NewUpdateAlertNotificationChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAlertNotificationChannel",
		Method:             "PUT",
		PathPattern:        "/alert-notifications/{notification_channel_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateAlertNotificationChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAlertNotificationChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAlertNotificationChannel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAlertNotificationChannelByUID updates notification channel by UID

Updates an existing notification channel identified by uid.
*/
func (a *Client) UpdateAlertNotificationChannelByUID(params *UpdateAlertNotificationChannelByUIDParams, opts ...ClientOption) (*UpdateAlertNotificationChannelByUIDOK, error) {
	if params == nil {
		params = NewUpdateAlertNotificationChannelByUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAlertNotificationChannelByUID",
		Method:             "PUT",
		PathPattern:        "/alert-notifications/uid/{notification_channel_uid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateAlertNotificationChannelByUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAlertNotificationChannelByUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAlertNotificationChannelByUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}
