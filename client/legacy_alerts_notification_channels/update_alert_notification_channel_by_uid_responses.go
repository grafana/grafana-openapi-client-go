// Code generated by go-swagger; DO NOT EDIT.

package legacy_alerts_notification_channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-openapi-client-go/models"
)

// UpdateAlertNotificationChannelByUIDReader is a Reader for the UpdateAlertNotificationChannelByUID structure.
type UpdateAlertNotificationChannelByUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAlertNotificationChannelByUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAlertNotificationChannelByUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateAlertNotificationChannelByUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAlertNotificationChannelByUIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAlertNotificationChannelByUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAlertNotificationChannelByUIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /alert-notifications/uid/{notification_channel_uid}] updateAlertNotificationChannelByUID", response, response.Code())
	}
}

// NewUpdateAlertNotificationChannelByUIDOK creates a UpdateAlertNotificationChannelByUIDOK with default headers values
func NewUpdateAlertNotificationChannelByUIDOK() *UpdateAlertNotificationChannelByUIDOK {
	return &UpdateAlertNotificationChannelByUIDOK{}
}

/*
UpdateAlertNotificationChannelByUIDOK describes a response with status code 200, with default header values.

(empty)
*/
type UpdateAlertNotificationChannelByUIDOK struct {
	Payload *models.AlertNotification
}

// IsSuccess returns true when this update alert notification channel by Uid Ok response has a 2xx status code
func (o *UpdateAlertNotificationChannelByUIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update alert notification channel by Uid Ok response has a 3xx status code
func (o *UpdateAlertNotificationChannelByUIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update alert notification channel by Uid Ok response has a 4xx status code
func (o *UpdateAlertNotificationChannelByUIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update alert notification channel by Uid Ok response has a 5xx status code
func (o *UpdateAlertNotificationChannelByUIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update alert notification channel by Uid Ok response a status code equal to that given
func (o *UpdateAlertNotificationChannelByUIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update alert notification channel by Uid Ok response
func (o *UpdateAlertNotificationChannelByUIDOK) Code() int {
	return 200
}

func (o *UpdateAlertNotificationChannelByUIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidOk %s", 200, payload)
}

func (o *UpdateAlertNotificationChannelByUIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidOk %s", 200, payload)
}

func (o *UpdateAlertNotificationChannelByUIDOK) GetPayload() *models.AlertNotification {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AlertNotification)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotificationChannelByUIDUnauthorized creates a UpdateAlertNotificationChannelByUIDUnauthorized with default headers values
func NewUpdateAlertNotificationChannelByUIDUnauthorized() *UpdateAlertNotificationChannelByUIDUnauthorized {
	return &UpdateAlertNotificationChannelByUIDUnauthorized{}
}

/*
UpdateAlertNotificationChannelByUIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type UpdateAlertNotificationChannelByUIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

// IsSuccess returns true when this update alert notification channel by Uid unauthorized response has a 2xx status code
func (o *UpdateAlertNotificationChannelByUIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update alert notification channel by Uid unauthorized response has a 3xx status code
func (o *UpdateAlertNotificationChannelByUIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update alert notification channel by Uid unauthorized response has a 4xx status code
func (o *UpdateAlertNotificationChannelByUIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update alert notification channel by Uid unauthorized response has a 5xx status code
func (o *UpdateAlertNotificationChannelByUIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update alert notification channel by Uid unauthorized response a status code equal to that given
func (o *UpdateAlertNotificationChannelByUIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update alert notification channel by Uid unauthorized response
func (o *UpdateAlertNotificationChannelByUIDUnauthorized) Code() int {
	return 401
}

func (o *UpdateAlertNotificationChannelByUIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidUnauthorized %s", 401, payload)
}

func (o *UpdateAlertNotificationChannelByUIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidUnauthorized %s", 401, payload)
}

func (o *UpdateAlertNotificationChannelByUIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotificationChannelByUIDForbidden creates a UpdateAlertNotificationChannelByUIDForbidden with default headers values
func NewUpdateAlertNotificationChannelByUIDForbidden() *UpdateAlertNotificationChannelByUIDForbidden {
	return &UpdateAlertNotificationChannelByUIDForbidden{}
}

/*
UpdateAlertNotificationChannelByUIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type UpdateAlertNotificationChannelByUIDForbidden struct {
	Payload *models.ErrorResponseBody
}

// IsSuccess returns true when this update alert notification channel by Uid forbidden response has a 2xx status code
func (o *UpdateAlertNotificationChannelByUIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update alert notification channel by Uid forbidden response has a 3xx status code
func (o *UpdateAlertNotificationChannelByUIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update alert notification channel by Uid forbidden response has a 4xx status code
func (o *UpdateAlertNotificationChannelByUIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update alert notification channel by Uid forbidden response has a 5xx status code
func (o *UpdateAlertNotificationChannelByUIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update alert notification channel by Uid forbidden response a status code equal to that given
func (o *UpdateAlertNotificationChannelByUIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update alert notification channel by Uid forbidden response
func (o *UpdateAlertNotificationChannelByUIDForbidden) Code() int {
	return 403
}

func (o *UpdateAlertNotificationChannelByUIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidForbidden %s", 403, payload)
}

func (o *UpdateAlertNotificationChannelByUIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidForbidden %s", 403, payload)
}

func (o *UpdateAlertNotificationChannelByUIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotificationChannelByUIDNotFound creates a UpdateAlertNotificationChannelByUIDNotFound with default headers values
func NewUpdateAlertNotificationChannelByUIDNotFound() *UpdateAlertNotificationChannelByUIDNotFound {
	return &UpdateAlertNotificationChannelByUIDNotFound{}
}

/*
UpdateAlertNotificationChannelByUIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type UpdateAlertNotificationChannelByUIDNotFound struct {
	Payload *models.ErrorResponseBody
}

// IsSuccess returns true when this update alert notification channel by Uid not found response has a 2xx status code
func (o *UpdateAlertNotificationChannelByUIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update alert notification channel by Uid not found response has a 3xx status code
func (o *UpdateAlertNotificationChannelByUIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update alert notification channel by Uid not found response has a 4xx status code
func (o *UpdateAlertNotificationChannelByUIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update alert notification channel by Uid not found response has a 5xx status code
func (o *UpdateAlertNotificationChannelByUIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update alert notification channel by Uid not found response a status code equal to that given
func (o *UpdateAlertNotificationChannelByUIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update alert notification channel by Uid not found response
func (o *UpdateAlertNotificationChannelByUIDNotFound) Code() int {
	return 404
}

func (o *UpdateAlertNotificationChannelByUIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidNotFound %s", 404, payload)
}

func (o *UpdateAlertNotificationChannelByUIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidNotFound %s", 404, payload)
}

func (o *UpdateAlertNotificationChannelByUIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotificationChannelByUIDInternalServerError creates a UpdateAlertNotificationChannelByUIDInternalServerError with default headers values
func NewUpdateAlertNotificationChannelByUIDInternalServerError() *UpdateAlertNotificationChannelByUIDInternalServerError {
	return &UpdateAlertNotificationChannelByUIDInternalServerError{}
}

/*
UpdateAlertNotificationChannelByUIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type UpdateAlertNotificationChannelByUIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

// IsSuccess returns true when this update alert notification channel by Uid internal server error response has a 2xx status code
func (o *UpdateAlertNotificationChannelByUIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update alert notification channel by Uid internal server error response has a 3xx status code
func (o *UpdateAlertNotificationChannelByUIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update alert notification channel by Uid internal server error response has a 4xx status code
func (o *UpdateAlertNotificationChannelByUIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update alert notification channel by Uid internal server error response has a 5xx status code
func (o *UpdateAlertNotificationChannelByUIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update alert notification channel by Uid internal server error response a status code equal to that given
func (o *UpdateAlertNotificationChannelByUIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update alert notification channel by Uid internal server error response
func (o *UpdateAlertNotificationChannelByUIDInternalServerError) Code() int {
	return 500
}

func (o *UpdateAlertNotificationChannelByUIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidInternalServerError %s", 500, payload)
}

func (o *UpdateAlertNotificationChannelByUIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidInternalServerError %s", 500, payload)
}

func (o *UpdateAlertNotificationChannelByUIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
